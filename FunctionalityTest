package Breakout;

import java.awt.Color;
import acm.graphics.*;
import acm.program.GraphicsProgram;

public class FunctionalityTest extends GraphicsProgram{

	private static final double SIZE = 25;
	static final double DELTA = 2;
	
	public void run() {
		setSize(300, 600);
		double x = 150 - SIZE / 2;
		double y = this.getHeight() / 2;
		AnimatedBall redBall = new AnimatedBall(SIZE);
		redBall.setFilled(true);
		redBall.setColor(Color.RED);
		add(redBall, x, y);
		
		GLabel startMessage = new GLabel("Click to start Breakout!");
		startMessage.setLocation(150 - startMessage.getWidth() / 2, this.getHeight()/2);
		add(startMessage);
		
		Thread redBallThread = new Thread(redBall);
		waitForClick();
		startMessage.setVisible(false);
		
		//Game starts.
		boolean win = false;
		boolean lose = false;
		while(win == false && lose == false) {
			
		redBallThread.start();
		
		double deltaX = Math.sin(redBall.getDirection());
		double deltaY = Math.cos(redBall.getDirection());
		double redX = redBall.getX();
		double redY = redBall.getY();
		if (		getElementAt(redX + deltaX * DELTA , redY + deltaY * DELTA) != null ||
				getElementAt(redX + deltaX * DELTA + SIZE , redY + deltaY * DELTA) != null ||
				getElementAt(redX + deltaX * DELTA , redY + deltaY * DELTA + SIZE) != null ||
				getElementAt(redX + deltaX * DELTA + SIZE, redY + deltaY * DELTA + SIZE) != null){
			
			redBall.setDirection(calculateDirection(redBall,getElementAt(redBall.getX(),redBall.getY())));
		}
		
		}

		// redBallThread.wait();
		// try {
		// redSquareThread.sl(50);
		// } catch (InterruptedException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// }

	}

	private double calculateDirection(AnimatedBall redBall, GObject elementAt) {
//		if(elementAt instanceof Brick /*|| elementAt instanceof Wall*/){
//			
//		}else if(elementAt instanceof Paddle){
//			
//		}else if(elementAt instanceof Bottom){
//			
//		}
			
		
		
		// TODO Auto-generated method stub
		return 0;
	}
	
	
	
}
